<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE syntax SYSTEM "syntax.dtd">
<syntax>
  <head>
    <name>Oxygene-HTML</name>
    <!-- The definitions title -->
    <charsintokens>
      <![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ<>]]>
	</charsintokens>
    <!-- Valid Characters for Variables -->
    <!-- <charsdelimitingtokens></charsdelimitingtokens> -->
  </head>
  <states>
    <!-- STUDIO - rewritten for 1.6, do not replace. -->
    <default id="Base" usesymbolsfrommode="ASP-HTML" useautocompletefrommode="HTML" usespellchecking="yes" scope="meta.default">
      <import mode="XML" keywords-only="yes" />
      <state id="ASP-Oxygene" usesymbolsfrommode="ASP-HTML" useautocompletefrommode="ASP-HTML" scope="meta.default" foldable="yes">
        <begin>
          <regex>&lt;%(?:(?:[\t ]*@(?:\s*\w++(?!=))?)|=?)</regex>
          <autoend>%&gt;</autoend>
        </begin>
        <end>
          <regex>(?:%&gt;)</regex>
        </end>
        <keywords id="Operators" useforautocomplete="no" scope="language.operator" highlightInOrder="yes">
          <regex>([\^\+\-\*\/\=\!\&lt;\&gt;&amp;])</regex>
        </keywords>
        <keywords id="ASP Delimiter" useforautocomplete="no" scope="markup.processing.languageswitch" highlightInOrder="yes">
          <regex>(&lt;%(?:(?:[\t ]*@(?:\s*\w++(?!=))?)|=?))</regex>
          <regex>(&lt;%)(?![\S])</regex>
          <regex>(%&gt;)</regex>
          <regex>(&lt;%%&gt;)</regex>
        </keywords>
        <keywords id="Oxygene Keywords" casesensitive="no" useforautocomplete="yes" scope="keyword.oxygene">
          <string>abstract</string>
          <string>add</string>
          <string>and</string>
          <string>array</string>
          <string>as</string>
          <string>aspect</string>
          <string>assembly</string>
          <string>async</string>
          <string>autoreleasepool</string>
          <string>await</string>
          <string>begin</string>
          <string>block</string>
          <string>break</string>
          <string>case</string>
          <string>class</string>
          <string>const</string>
          <string>constructor</string>
          <string>continue</string>
          <string>default</string>
          <string>delegate</string>
          <string>deprecated</string>
          <string>div</string>
          <string>do</string>
          <string>downto</string>
          <string>dynamic</string>
          <string>each</string>
          <string>else</string>
          <string>empty</string>
          <string>end</string>
          <string>ensure</string>
          <string>enum</string>
          <string>event</string>
          <string>except</string>
          <string>exit</string>
          <string>extension</string>
          <string>external</string>
          <string>false</string>
          <string>finalizer</string>
          <string>finally</string>
          <string>flags</string>
          <string>for</string>
          <string>function</string>
          <string>global</string>
          <string>has</string>
          <string>if</string>
          <string>implements</string>
          <string>implementation</string>
          <string>implies</string>
          <string>in</string>
          <string>index</string>
          <string>inherited</string>
          <string>inline</string>
          <string>interface</string>
          <string>invariants</string>
          <string>is</string>
          <string>iterator</string>
          <string>locked</string>
          <string>locking</string>
          <string>loop</string>
          <string>mapped</string>
          <string>matching</string>
          <string>method</string>
          <string>mod</string>
          <string>module</string>
          <string>namespace</string>
          <string>nested</string>
          <string>new</string>
          <string>nil</string>
          <string>notify</string>
          <string>nullable</string>
          <string>of</string>
          <string>old</string>
          <string>on</string>
          <string>operator</string>
          <string>optional</string>
          <string>or</string>
          <string>out</string>
          <string>override</string>
          <string>parallel</string>
          <string>params</string>
          <string>partial</string>
          <string>pinned</string>
          <string>private</string>
          <string>procedure</string>
          <string>property</string>
          <string>protected</string>
          <string>public</string>
          <string>queryable</string>
          <string>raise</string>
          <string>read</string>
          <string>readonly</string>
          <string>record</string>
          <string>reintroduce</string>
          <string>remove</string>
          <string>repeat</string>
          <string>require</string>
          <string>result</string>
          <string>sealed</string>
          <string>selector -</string>
          <string>self</string>
          <string>sequence</string>
          <string>set</string>
          <string>shl</string>
          <string>shr</string>
          <string>static</string>
          <string>step</string>
          <string>strong</string>
          <string>then</string>
          <string>to</string>
          <string>true</string>
          <string>try</string>
          <string>type</string>
          <string>unit</string>
          <string>unretained</string>
          <string>unsafe</string>
          <string>until</string>
          <string>uses</string>
          <string>using</string>
          <string>var</string>
          <string>virtual</string>
          <string>weak</string>
          <string>where</string>
          <string>while</string>
          <string>with</string>
          <string>write</string>
          <string>xor</string>
          <string>yield</string>
        </keywords>
        <keywords id="Types" casesensitive="no" useforautocomplete="yes" scope="keyword.type">
          <string>string</string>
          <string>boolean</string>
          <string>int32</string>
        </keywords>
        <keywords id="Number Literals" casesensitive="no" useforautocomplete="yes" scope="constant.numeric.keyword">
          <string>false</string>
          <string>nil</string>
          <string>true</string>
        </keywords>
        <keywords id="ASP Numbers" useforautocomplete="no" scope="constant.numeric">
          <regex>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</regex>
        </keywords>
        <keywords id="FunctionRegex" useforautocomplete="no" scope="language.function">
          <regex>([A-Za-z0-9_]+ *)\(</regex>
        </keywords>
        <state id="ASP Comment" type="comment" foldable="yes" background-color="none" scope="comment.block.vb">
          <begin>
            <regex>/\*</regex>
          </begin>
          <end>
            <regex>\*/</regex>
          </end>
        </state>
        <state id="ASP SingleComment" type="comment" background-color="none" scope="comment.line.vb">
          <begin>
            <regex>//</regex>
          </begin>
          <end>
            <regex>[\n\r]|(?'unwindend'\%&gt;)</regex>
          </end>
        </state>
        <state id="ASP CurlyComment" type="comment" background-color="none" scope="comment.line.vb">
          <begin>
            <regex>\{</regex>
          </begin>
          <end>
            <regex>\}</regex>
          </end>
        </state>
        <state id="ASP CurlyComment2" type="comment" background-color="none" scope="comment.line.vb">
          <begin>
            <regex>\(\*</regex>
          </begin>
          <end>
            <regex>\*\)</regex>
          </end>
        </state>
        <state id="ASP CStyle String" type="string" background-color="none" usespellchecking="yes" scope="string.double.vb">
          <begin>
            <regex>"</regex>
          </begin>
          <end>
            <regex>((?!=")")</regex>
          </end>
        </state>
        <state id="ASP PascalStyle String" type="string" background-color="none" usespellchecking="yes" scope="string.double.vb">
          <begin>
            <regex>'</regex>
          </begin>
          <end>
            <regex>((?!=')')</regex>
          </end>
        </state>
        <state id="VBBlocksFunction" foldable="yes" scope="meta.block">
          <begin>
            <regex>(?&lt;!exit )\b(?i:(?'vbfunctionkeyword'(?:function|sub|class)))\b[^\n\r]*</regex>
            <autoend>End \g&lt;vbfunctionkeyword&gt;</autoend>
          </begin>
          <end>
            <regex>(?i)(End (?#see-insert-start-group:vbfunctionkeyword))|(?:.(?=\s*(%&gt;|-%&gt;)))</regex>
          </end>
          <import state="ASP-Oxygene" />
        </state>
        <state id="VBBlocksIf" foldable="yes" scope="meta.block">
          <begin>
            <regex>\b(?i)if(?'trimmedstart2'[^\n\r]+?then(?=\s*?[\n\r#%']))</regex>
            <autoend>End If&gt;</autoend>
          </begin>
          <end>
            <regex>(?i)([.\s](?=else)|(?:end if))|(?:.(?=\s*(%&gt;|-%&gt;)))</regex>
          </end>
          <import state="ASP-Oxygene" />
        </state>
        <state id="VBBlocksElse" foldable="yes" scope="meta.block">
          <begin>
            <regex>(?i:(?&lt;!case )\belse\b)</regex>
            <autoend>End If</autoend>
          </begin>
          <end>
            <regex>(?i)(End If)|(?:.(?=\s*(%&gt;|-%&gt;)))</regex>
          </end>
          <import state="ASP-Oxygene" />
        </state>
        <state id="VBBlocksFor" foldable="yes" scope="meta.block">
          <begin>
            <regex>\b(?i:for\b[^\n\r]+?\b(?:in|to)\b[^\n\r#']+?)(?=\s*?[\n\r#%'])</regex>
            <autoend>Next</autoend>
          </begin>
          <end>
            <regex>(?i)(?:next)|(?:.(?=\s*(%&gt;|-%&gt;)))</regex>
          </end>
          <import state="ASP-Oxygene" />
        </state>
        <state id="VBBlocksSelect" foldable="yes" scope="meta.block">
          <begin>
            <regex>(?i)\b:select case\b[^\n\r#']+?(?=\s*?[\n\r#%'])</regex>
            <autoend>End Select</autoend>
          </begin>
          <end>
            <regex>(?i)(?:end select)|(?:.(?=\s*(%&gt;|-%&gt;)))</regex>
          </end>
          <import state="ASP-Oxygene" />
        </state>
        <state id="VBBlocksWith" foldable="yes" scope="meta.block">
          <begin>
            <regex>\b(?i:with\b[^\n\r#']+?)(?=\s*?[\n\r#'])</regex>
            <autoend>End With</autoend>
          </begin>
          <end>
            <regex>(?i)(?:end with)|(?:.(?=\s*(%&gt;|-%&gt;)))</regex>
          </end>
          <import state="ASP-Oxygene" />
        </state>
      </state>
      <state id="CommentWithPreprocessor" type="comment" foldable="yes" scope="markup.processing">
        <begin>
          <regex>&lt;!--\s*#</regex>
          <autoend>--&gt;</autoend>
        </begin>
        <end>
          <regex>--&gt;</regex>
        </end>
        <keywords id="SGML Double Dash" useforautocomplete="no" scope="meta.invalid.sgmlcomment">
          <regex>(?&lt;!\!)(--)(?!&gt;)</regex>
        </keywords>
        <!--<import mode="Base" state="EmailAndURLContainerState" keywords-only="yes"/>-->
      </state>
      <state-link mode="XML" state="Comment" />
      <!--  This is the "we do a complete HTML mode and import ASP-Oxygene everywhere" section -->
      <state id="CDATA" foldable="yes" scope="markup.inline.cdata">
        <begin>
          <regex>&lt;!\s*\[CDATA\s*\[</regex>
          <autoend>\]\]&gt;</autoend>
        </begin>
        <end>
          <regex>\]\s*\]\s*&gt;</regex>
        </end>
        <state-link state="ASP-Oxygene" />
      </state>
      <state id="Doctype" foldable="no" scope="markup.declaration">
        <begin>
          <regex>&lt;!</regex>
          <autoend>&gt;</autoend>
        </begin>
        <end>
          <regex>&gt;</regex>
        </end>
        <state id="String" type="string" scope="markup.declaration.string.double">
          <begin>
            <regex>"</regex>
          </begin>
          <end>
            <regex>"</regex>
          </end>
          <state-link state="ASP-Oxygene" />
        </state>
        <state id="SingleString" type="string" scope="markup.declaration.string.single">
          <begin>
            <regex>'</regex>
          </begin>
          <end>
            <regex>'</regex>
          </end>
          <state-link state="ASP-Oxygene" />
        </state>
        <state id="Block" type="block" foldable="yes" indent="yes" scope="meta.block.square">
          <begin>
            <regex>\[</regex>
            <autoend>\]</autoend>
          </begin>
          <end>
            <regex>]</regex>
          </end>
          <import />
        </state>
        <state-link state="ASP-Oxygene" />
      </state>
      <state id="Escape" foldable="no" scope="markup.processing">
        <begin>
          <regex>&lt;\?</regex>
          <autoend>\?&gt;</autoend>
        </begin>
        <end>
          <regex>\?&gt;</regex>
        </end>
        <state id="ProcessingString" type="string" scope="markup.processing.attribute.value.string">
          <begin>
            <regex>"</regex>
          </begin>
          <end>
            <regex>"</regex>
          </end>
          <state-link state="ASP-Oxygene" />
        </state>
        <state id="ProcessingSingleString" type="string" scope="markup.processing.attribute.value.string">
          <begin>
            <regex>'</regex>
          </begin>
          <end>
            <regex>'</regex>
          </end>
          <state-link state="ASP-Oxygene" />
        </state>
        <state-link state="ASP-Oxygene" />
      </state>
      <state id="Inline CSS" delimiterState="Tags" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" foldable="yes" indent="yes" scope="meta.block.css">
        <begin>
          <regex>&lt;[ \t]*(?i)style[^&gt;]*&gt;</regex>
          <autoend>&lt;/style&gt;</autoend>
        </begin>
        <end>
          <regex>(?i)&lt;[ \t]*/[ \t]*style[ \t]*&gt;</regex>
        </end>
        <import mode="CSS" />
      </state>
      <state id="JavaScript Container" containerState="yes" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.block.js">
        <import mode="JavaScript" keywords-only="yes" />
        <state-link state="AutodocComment" mode="JavaScript" />
        <state-link state="Comment" mode="JavaScript" />
        <state-link state="Regular Expressions" mode="JavaScript" />
        <state-link state="String" mode="JavaScript" />
        <state-link state="SingleString" mode="JavaScript" />
      </state>
      <state id="Inline JavaScript" delimiterState="Tags" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" foldable="yes" scope="meta.block.js">
        <begin>
          <regex>(?:&lt;[ \t]*(?i)script\s*?&gt;)|(?:&lt;(?i)script.+?javascript.*?(?&lt;![%-])&gt;)</regex>
          <autoend>&lt;/script&gt;</autoend>
        </begin>
        <end>
          <regex>(?i)&lt;[ \t]*/[ \t]*script[ \t]*&gt;</regex>
        </end>
        <import mode="JavaScript" />
      </state>
      <state id="Inline Oxygene" delimiterState="Tags" usesymbolsfrommode="ASP-HTML" useautocompletefrommode="ASP-HTML" scope="meta.block.Oxygene" foldable="yes">
        <begin>
          <regex>&lt;(?i)script.+?(?:Oxygene|server).*?(?&lt;![?/])&gt;</regex>
          <autoend>&lt;/script&gt;</autoend>
        </begin>
        <end>
          <regex>&lt;(?i)/[\t ]*script[\t ]*&gt;</regex>
        </end>
        <import state="ASP-Oxygene" />
      </state>
      <state id="Self Closing Tags" foldable="no" scope="markup.tag">
        <begin>
          <regex>&lt;[ \t]*(?i)(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)</regex>
        </begin>
        <end>
          <regex>&gt;</regex>
        </end>
        <import state="Tags" />
      </state>
      <state id="Foldable Tags" containerState="yes" delimiterState="Tags" foldBegin="&lt;[ \t]*(?'xmltagstatename'(?i:(?:a(?:rticle|side|udio))|(?:h(?:ead|eader|tml|\d|group))|(?:b(?:ody|lockquote))|p|pre|a|(?:t(?:able|head|body|foot|h|d|r))|div|(?:f(?:ieldset|orm|ooter))|ul|ol|dl|(?:s(?:ection|elect|ource))|nav|ruby|video))\b[\s\S]*(?&lt;![/?])&gt;" foldEnd="&lt;\s*/\s*(?i)(?#see-insert-start-group:xmltagstatename)\s*&gt;" foldable="yes" usespellchecking="yes" scope="meta.block.tag">
        <import mode="XML" keywords-only="yes" />
        <import keywords-only="yes" />
        <import />
      </state>
      <state id="Foldable ASP Tags" containerState="yes" delimiterState="ASP Tags" foldBegin="&lt;[ \t]*(?'xmltagstatename'[-:_\.a-zA-Z\d]+)[\s\S]*(?&lt;![/?])&gt;" foldEnd="&lt;\s*/\s*(?i)(?#see-insert-start-group:xmltagstatename)\s*&gt;" foldable="yes" usespellchecking="yes" scope="meta.block.tag">
        <import mode="XML" keywords-only="yes" />
        <import keywords-only="yes" />
        <import />
      </state>
      <state id="ASP Tags" foldable="no" foldState="Foldable ASP Tags" scope="markup.tag.framework">
        <begin>
          <regex>&lt;(?=(?i)\s*/?ASP:)</regex>
        </begin>
        <end>
          <regex>&gt;</regex>
        </end>
        <import state="Tags" />
        <keywords id="Attributes in ASP Tags" useforautocomplete="no" scope="markup.tag.attribute.name">
          <regex>([\w-]*)(?=[ \t]*=)</regex>
        </keywords>
      </state>
      <state id="Tags" usespellchecking="no" foldState="Foldable Tags" scope="markup.tag">
        <begin>
          <regex>&lt;</regex>
        </begin>
        <end>
          <regex>&gt;</regex>
        </end>
        <state-link state="ASP-Oxygene" />
        <state id="Javascript Actions" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.default">
          <begin>
            <regex>\b(?i)on[\w]+[ \t]*=[ \t]*"</regex>
          </begin>
          <end>
            <regex>"</regex>
          </end>
          <keywords id="Action Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
            <regex>\b((?i)on[\w-]+)[ \t]*=</regex>
          </keywords>
          <keywords id="Action Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
            <regex>(")</regex>
          </keywords>
          <keywords id="Action Equals" useforautocomplete="no" scope="markup.tag">
            <regex>\b(?i)on[\w-]+([ \t]*=[ \t]*)</regex>
          </keywords>
          <import mode="JavaScript" keywords-only="yes" />
          <import state="JavaScript Container" />
        </state>
        <state id="Links" type="url" useforautocomplete="no" scope="meta.link">
          <begin>
            <regex>\b(?i)(?:href|src)[ \t]*=[ \t]*"</regex>
          </begin>
          <end>
            <regex>"</regex>
          </end>
          <state-link state="ASP-Oxygene" />
          <state id="Javascript in Links" usesymbolsfrommode="JavaScript" useautocompletefrommode="JavaScript" scope="meta.block.js">
            <begin>
              <regex>\b[ \t]*(?i)javascript:</regex>
            </begin>
            <end>
              <regex>(?'unwindend'")</regex>
            </end>
            <import mode="JavaScript" keywords-only="yes" />
            <import state="JavaScript Container" />
          </state>
          <keywords id="Link Attribute" useforautocomplete="no" scope="markup.tag.attribute.name">
            <regex>\b((?i)href|src)[ \t]*=</regex>
          </keywords>
          <keywords id="Link Quotes" useforautocomplete="no" scope="markup.tag.attribute.value.string">
            <regex>(")</regex>
          </keywords>
          <keywords id="Link Equals" useforautocomplete="no" scope="markup.tag">
            <regex>\b(?i)(?:href|src)([ \t]*=[ \t]*)</regex>
          </keywords>
        </state>
        <state-link state="Style CSS" mode="HTML" />
        <state id="Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
          <begin>
            <regex>"</regex>
          </begin>
          <end>
            <regex>"</regex>
          </end>
          <state-link state="ASP-Oxygene" />
        </state>
        <state id="Single Strings in Tags" type="string" useforautocomplete="no" scope="markup.tag.attribute.value.string">
          <begin>
            <regex>'</regex>
          </begin>
          <end>
            <regex>'</regex>
          </end>
          <state-link state="ASP-Oxygene" />
        </state>
        <keywords id="Attributes in Tags" useforautocomplete="no" scope="markup.tag.attribute.name">
          <regex>([\w-]*)(?=[ \t]*=)</regex>
        </keywords>
      </state>
    </default>
  </states>
</syntax>
